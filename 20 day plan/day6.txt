# Create a longform, highly detailed Day 6 Watchlist Table and Simulation guide in .txt format
detailed_day_6_text = """
üìò Day 6: Watchlist Table and Option Contract Simulation in React (Longform Learning Guide)

==================================================================
üìå Objective
==================================================================
Today, you will:
- Build a WatchlistTable component to display user-owned option contracts
- Show key metrics like cost basis, breakeven price, and total position value
- Simulate stock price movements and show potential option value scenarios
- Learn how to compute derived values in React using state and logic

==================================================================
üß† Why Build a Watchlist Table?
==================================================================
The Watchlist is for users who already own contracts and want to understand how those contracts may perform.
It‚Äôs also where we‚Äôll later allow "rollover" comparisons and advanced simulations.

==================================================================
üìÅ Step 1: Create WatchlistTable Component
==================================================================

Inside src/components/, create a new file:

WatchlistTable.js

Paste this:

import React, { useEffect, useState } from 'react';
import { getWatchlist } from '../services/api';

function WatchlistTable() {
  const [contracts, setContracts] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [simulatedGain, setSimulatedGain] = useState(0.1); // +10% stock move

  useEffect(() => {
    getWatchlist()
      .then((res) => {
        setContracts(res.data);
        setLoading(false);
      })
      .catch((err) => {
        setError("Failed to load watchlist data.");
        setLoading(false);
      });
  }, []);

  const simulateOptionValue = (strike, cost, type, gain) => {
    // Very basic payoff simulation logic
    const stockPrice = type === 'call' ? strike * (1 + gain) : strike * (1 - gain);
    const intrinsic = type === 'call'
      ? Math.max(0, stockPrice - strike)
      : Math.max(0, strike - stockPrice);
    return intrinsic;
  };

  if (loading) return <p>Loading watchlist...</p>;
  if (error) return <p>{error}</p>;

  return (
    <div className="table-container">
      <h2>üéØ Watchlist Contracts</h2>
      <label>Simulate Stock Movement (%): 
        <input 
          type="number" 
          step="0.01"
          value={simulatedGain} 
          onChange={(e) => setSimulatedGain(parseFloat(e.target.value))} 
        />
      </label>
      <table>
        <thead>
          <tr>
            <th>Ticker</th>
            <th>Type</th>
            <th>Strike</th>
            <th>Expiration</th>
            <th>Cost/Contract</th>
            <th># Contracts</th>
            <th>Total Cost</th>
            <th>Simulated Value</th>
          </tr>
        </thead>
        <tbody>
          {contracts.map((c, i) => {
            const totalCost = c.number_of_contracts * c.average_cost_per_contract * 100;
            const simulated = simulateOptionValue(
              c.strike,
              c.average_cost_per_contract,
              c.option_type,
              simulatedGain
            );
            const totalSim = simulated * 100 * c.number_of_contracts;
            return (
              <tr key={i}>
                <td>{c.ticker}</td>
                <td>{c.option_type.toUpperCase()}</td>
                <td>${c.strike}</td>
                <td>{c.expiration}</td>
                <td>${c.average_cost_per_contract.toFixed(2)}</td>
                <td>{c.number_of_contracts}</td>
                <td>${totalCost.toFixed(2)}</td>
                <td>${totalSim.toFixed(2)}</td>
              </tr>
            );
          })}
        </tbody>
      </table>
    </div>
  );
}

export default WatchlistTable;

==================================================================
‚öôÔ∏è Step 2: Update App.js to Show Watchlist
==================================================================

import React from 'react';
import ScreenerTable from './components/ScreenerTable';
import WatchlistTable from './components/WatchlistTable';

function App() {
  return (
    <div className="App">
      <h1>Options Analysis Platform</h1>
      <ScreenerTable />
      <WatchlistTable />
    </div>
  );
}

export default App;

==================================================================
üé® Step 3: Style the Watchlist Table (Optional)
==================================================================

You can reuse the same CSS from Day 5 for table formatting.

==================================================================
üß™ Step 4: Test Your Watchlist
==================================================================

Start your server:
npm start

You should see:
- Table listing contracts
- Input for simulating % move (positive or negative)
- Simulated returns in dollar value

==================================================================
‚úÖ What You‚Äôve Accomplished
==================================================================

‚úî Built WatchlistTable component  
‚úî Pulled contract data from Django backend  
‚úî Simulated basic value projection based on stock movement  
‚úî Added interactive input to change simulated gain/loss  
‚úî Laid foundation for contract "rollover" and ROI logic in future days

Next up: You‚Äôll allow users to POST new Screener or Watchlist entries via a form (Day 7).
"""

# Save to .txt file
txt_path = "/mnt/data/Day_6_Watchlist_Table_and_Simulation.txt"
with open(txt_path, "w") as f:
    f.write(detailed_day_6_text)

txt_path
