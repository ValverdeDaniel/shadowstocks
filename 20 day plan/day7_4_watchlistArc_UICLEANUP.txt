ðŸ“Œ Watchlist Enhancement Implementation Plan with Notes
======================================================

STAGE 1 â€” Add Pending Contracts Queue in Watchlist.js
-----------------------------------------------------
ðŸ’¡ WHY: Instead of running contracts immediately, we queue them so you can add multiple and run them all together.

1.1 Add pendingContracts state at the top of Watchlist.js:

  const [pendingContracts, setPendingContracts] = useState([]);

  # We use this array to store contracts before sending them to the API in bulk.

1.2 Add handlers in Watchlist.js:

  const handleAddToPending = (params) => {
    setPendingContracts((prev) => [...prev, params]);
  };
  # Adds a single contract to the pending queue.

  const handleRunAllPending = async () => {
    if (pendingContracts.length === 0) return;
    try {
      const response = await fetch('/api/run-bulk-watchlist/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contracts: pendingContracts }),
      });
      if (!response.ok) throw new Error('Failed to run pending contracts');
      const data = await response.json();
      setWatchlistItems((prev) => [...prev, ...data]);
      setPendingContracts([]);
      # Clears the queue on success.
    } catch (error) {
      console.error('Error running pending contracts:', error);
    }
  };

  const handleRemovePending = (index) => {
    setPendingContracts((prev) => prev.filter((_, i) => i !== index));
  };
  # Allows removing a single contract from the pending queue.

1.3 Pass handleAddToPending to WatchlistParamsForm:

  <WatchlistParamsForm
    onAdd={handleAddToWatchlist}
    handleAddToPending={handleAddToPending}
    groups={groups}
    fetchGroups={fetchGroups}
    fetchSavedContracts={fetchSavedContracts}
  />
  # This lets the form add contracts to the pending queue instead of running immediately.

1.4 Render pending contracts below the form in Watchlist.js:

  {pendingContracts.length > 0 && (
    <div className="space-y-2 mb-4">
      <h4 className="heading-lg">Pending Contracts</h4>
      {pendingContracts.map((c, i) => (
        <div key={i} className="card flex justify-between items-center">
          <span className="text-sm">{c.ticker} {c.option_type} {c.strike}</span>
          <button
            onClick={() => handleRemovePending(i)}
            className="btn-red text-xs"
          >
            Remove
          </button>
        </div>
      ))}
      <button onClick={handleRunAllPending} className="btn-primary">
        Run All Pending
      </button>
    </div>
  )}
  # Shows queued contracts and provides Run All / Remove functionality.


STAGE 2 â€” Update WatchlistParamsForm.js
---------------------------------------
ðŸ’¡ WHY: Replacing immediate runs with adding to queue gives you control over when to run contracts.

2.1 Accept handleAddToPending as prop:

  function WatchlistParamsForm({ onAdd, handleAddToPending, groups = [], fetchGroups, fetchSavedContracts }) {

2.2 Replace the submit handler to call handleAddToPending:

  const handleSubmit = (e) => {
    e.preventDefault();
    handleAddToPending(params);
  };
  # This makes the Add button put contracts into the pending queue instead of sending them straight to the API.


STAGE 3 â€” Add Bulk Controls to WatchlistSavedParams.js
------------------------------------------------------
ðŸ’¡ WHY: Performing actions (load/run/delete/assign) on many contracts at once improves efficiency.

3.1 Add bulk toolbar above saved contracts list:

  {selectedContracts.length > 0 && (
    <div className="flex gap-2 mb-4 items-center">
      <button onClick={handleRunSelected} className="btn-primary">Run Selected</button>
      <button onClick={handleBulkDelete} className="btn-red">Delete Selected</button>
      <select
        className="input flex-1"
        multiple
        onChange={(e) => setSelectedGroups([...e.target.selectedOptions].map(opt => opt.value))}
      >
        {groups.map((g) => (
          <option key={g.id} value={g.id}>{g.name}</option>
        ))}
      </select>
      <button onClick={handleBulkAssign} className="btn-primary">Assign to Groups</button>
    </div>
  )}
  # Shows bulk buttons when contracts are selected.

3.2 Add bulk delete handler:

  const handleBulkDelete = async () => {
    for (const id of selectedContracts) {
      await onDelete(id);
    }
    setSelectedContracts([]);
  };
  # Loops over selected contracts and deletes them one by one.

3.3 Add bulk assign handler:

  const handleBulkAssign = async () => {
    try {
      for (const contractId of selectedContracts) {
        for (const groupId of selectedGroups) {
          const response = await fetch(`/api/watchlist-groups/${groupId}/assign/`, {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify({ contract_ids: [contractId] }),
          });
          if (!response.ok) throw new Error(`Failed to assign contract ${contractId} to group ${groupId}`);
        }
      }
      alert('Contracts assigned successfully!');
      setSelectedContracts([]);
      setSelectedGroups([]);
      await fetchGroups();
      await fetchSavedContracts();
    } catch (error) {
      console.error('Error bulk assigning:', error);
    }
  };
  # Assigns each selected contract to each selected group.


STAGE 4 â€” Add Collapse Toggle in WatchlistSavedParams.js
--------------------------------------------------------
ðŸ’¡ WHY: Lets you hide/show saved contracts section for a cleaner interface.

4.1 Add collapse state at top of component:

  const [showSavedItems, setShowSavedItems] = useState(true);

4.2 Add toggle button above saved items section:

  <button
    onClick={() => setShowSavedItems(!showSavedItems)}
    className="btn-secondary mb-4"
  >
    {showSavedItems ? 'Hide Saved Watchlist Items' : 'Show Saved Watchlist Items'}
  </button>

  {showSavedItems && (
    <div className="space-y-4">
      {/* existing saved contracts rendering */}
    </div>
  )}
  # Clicking the button toggles the section open/closed.


STAGE 5 â€” Group Saved Contracts by Ticker in WatchlistSavedParams.js
--------------------------------------------------------------------
ðŸ’¡ WHY: Grouping by ticker organizes saved contracts visually.

5.1 Group contracts:

  const grouped = savedParams.reduce((acc, c) => {
    const key = c.ticker.toUpperCase();
    acc[key] = acc[key] || [];
    acc[key].push(c);
    return acc;
  }, {});

5.2 Replace list rendering with grouped contracts:

  {Object.entries(grouped).map(([ticker, contracts]) => (
    <div key={ticker}>
      <h4 className="heading-lg">{ticker} Contracts</h4>
      {contracts.map((param) => (
        <div key={param.id} className="card card-hover">
          {/* existing contract card content */}
        </div>
      ))}
    </div>
  ))}
  # Displays contracts under a heading for each ticker.


STAGE 6 â€” WatchlistGroups.js Enhancements
-----------------------------------------
ðŸ’¡ WHY: Adds bulk features inside groups, making it easier to work with grouped contracts.

6.1 Add checkboxes to contracts inside groups:

  <div key={c.id} className="flex items-center gap-2">
    <input
      type="checkbox"
      checked={selectedContracts.includes(c.id)}
      onChange={(e) => {
        if (e.target.checked) {
          setSelectedContracts((prev) => [...prev, c.id]);
        } else {
          setSelectedContracts((prev) => prev.filter((id) => id !== c.id));
        }
      }}
    />
    <span className="text-sm">{c.ticker} {c.option_type} {c.strike}</span>
  </div>
  # Allows selecting contracts for bulk actions inside a group.

6.2 Add group-level bulk toolbar below contracts list:

  {selectedContracts.length > 0 && (
    <div className="flex gap-2 mt-2">
      <button onClick={handleRunSelected} className="btn-primary">Run Selected</button>
      <button onClick={handleBulkDelete} className="btn-red">Delete Selected</button>
      <select
        className="input flex-1"
        multiple
        onChange={(e) => setSelectedGroups([...e.target.selectedOptions].map(opt => opt.value))}
      >
        {groups.map((g) => (
          <option key={g.id} value={g.id}>{g.name}</option>
        ))}
      </select>
      <button onClick={handleBulkAssign} className="btn-primary">Assign to Groups</button>
    </div>
  )}
  # Bulk controls appear when contracts in a group are selected.


STAGE 7 â€” Polish: Toasts, Hover, Zebra Striping
-----------------------------------------------
ðŸ’¡ WHY: Improves UX with better notifications and visuals.

7.1 Install react-toastify:

  npm install react-toastify
  # Adds a library for non-blocking toast messages.

7.2 Replace alert() calls with toast notifications:

  import { toast } from 'react-toastify';

  toast.success('Your success message here');
  toast.error('Your error message here');
  # Toasts look better and donâ€™t interrupt flow like alert().

7.3 Visual polish:

  - Add .card-hover to all contract/group cards for better feedback.
  - Use space-y-2 or gap-y-2 in contract/group lists for clearer spacing.
  - For tables, use .table-row-even / .table-row-odd classes for zebra striping.

END OF PLAN WITH NOTES
