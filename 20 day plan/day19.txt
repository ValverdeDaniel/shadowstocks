
ðŸ“˜ Day 19: Building Advanced ROI Analytics and ROI-over-Time Charting (Longform Learning Guide)

==================================================================
ðŸ“Œ Objective
==================================================================
Today, you will:
- Build logic to simulate ROI over time for Screener and Watchlist setups
- Visualize this ROI using line charts
- Display historical option value movement
- Compare to equivalent stock holding return

==================================================================
ðŸ§  Why Track ROI Over Time?
==================================================================
- Users gain insight into how their strategy wouldâ€™ve performed
- Helps validate option vs. equity returns
- Increases stickiness and perceived value of your platform
- Makes your app feel more like a financial modeling tool

==================================================================
ðŸ§± Step 1: Define Simulation Logic in Django
==================================================================

In `utils.py` or `services.py`:

```python
def simulate_roi_over_time(config, price_series):
    # Simulate ROI for an option strategy across a historical price series.
    # `config` is the saved strategy.
    # `price_series` is a list of historical prices (newest last).
    results = []
    initial_price = price_series[0]
    for i, price in enumerate(price_series):
        if config["option_type"] == "call":
            intrinsic = max(price - config["strike"], 0)
        else:
            intrinsic = max(config["strike"] - price, 0)

        premium_paid = config["average_cost_per_contract"]
        roi = ((intrinsic - premium_paid) / premium_paid) * 100
        stock_roi = ((price - initial_price) / initial_price) * 100
        results.append({"day": i, "stock_price": price, "roi": round(roi, 2), "stock_roi": round(stock_roi, 2)})
    return results
```

==================================================================
ðŸ“¦ Step 2: Add API Endpoint for Strategy ROI History
==================================================================

In `views.py`:

```python
from rest_framework.views import APIView
from rest_framework.response import Response
from .utils import simulate_roi_over_time

class StrategyROIView(APIView):
    def post(self, request):
        config = request.data.get("config")
        price_series = request.data.get("price_series")  # e.g., past 30 days

        if not config or not price_series:
            return Response({"error": "Missing data"}, status=400)

        results = simulate_roi_over_time(config, price_series)
        return Response(results)
```

Add to `urls.py`:

```python
path('api/simulate-roi/', StrategyROIView.as_view(), name='simulate-roi'),
```

==================================================================
ðŸ“ˆ Step 3: Create ROI Chart in React with Recharts
==================================================================

Install:

```bash
npm install recharts
```

In `ROIChart.js`:

```jsx
import { LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip, Legend } from 'recharts';

function ROIChart({ data }) {
  return (
    <LineChart width={500} height={300} data={data}>
      <XAxis dataKey="day" />
      <YAxis />
      <Tooltip />
      <Legend />
      <CartesianGrid stroke="#eee" strokeDasharray="5 5" />
      <Line type="monotone" dataKey="roi" stroke="#82ca9d" name="Option ROI" />
      <Line type="monotone" dataKey="stock_roi" stroke="#8884d8" name="Stock ROI" />
    </LineChart>
  );
}
```

==================================================================
ðŸ§ª Step 4: Hook It Up in Your Strategy View
==================================================================

In `StrategyDetail.js`:

```jsx
useEffect(() => {
  axios.post("/api/simulate-roi/", {
    config: selectedStrategy.config_data,
    price_series: [125, 127, 128, 129, 132, 130, 135]  // Example series
  }).then(res => setChartData(res.data));
}, [selectedStrategy]);
```

Then show `<ROIChart data={chartData} />`

==================================================================
âœ… What Youâ€™ve Accomplished
==================================================================

âœ” Simulated how options contracts perform over time  
âœ” Created backend logic to calculate ROI day by day  
âœ” Built interactive React line charts with Recharts  
âœ” Compared strategy ROI vs stock ROI  
âœ” Delivered premium-style analytics with minimal effort

Next up: Day 20 â€“ final polish, deployment prep, and marketing your MVP!
