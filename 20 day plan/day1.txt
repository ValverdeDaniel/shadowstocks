# Create a longform, highly detailed Day 1 Django setup guide in .txt format
detailed_day_1_text = """
📘 Day 1: Full Django Project Setup with PostgreSQL (Longform Learning Guide)

==================================================================
📌 Objective
==================================================================
By the end of Day 1, you will:
- Understand the purpose of Django, PostgreSQL, and virtual environments
- Create a Django project and app structure
- Connect Django to a PostgreSQL database
- Launch your local dev server and verify it's working

==================================================================
🔧 Step 1: Create and Activate a Virtual Environment
==================================================================

💡 Why?
Python virtual environments keep your project dependencies isolated.
This prevents conflicts between libraries from other projects.

📂 In your terminal:

# Create your project folder
mkdir options-platform
cd options-platform

# Create a virtual environment
python -m venv venv

# Activate the virtual environment
# Windows:
venv\\Scripts\\activate

# macOS/Linux:
source venv/bin/activate

You’ll know it’s activated when your terminal shows:
(venv) C:\\Users\\YourName\\options-platform

==================================================================
📦 Step 2: Install Django and PostgreSQL Driver
==================================================================

💡 Why?
Django is your backend framework.
psycopg2-binary is a Python package that lets Django talk to PostgreSQL.

Run:
pip install django psycopg2-binary

You can freeze your dependencies later with:
pip freeze > requirements.txt

==================================================================
📁 Step 3: Create Your Django Project
==================================================================

💡 Why?
This initializes your backend structure and config files.

Run:
django-admin startproject backend .

The dot (.) ensures it doesn’t nest the project inside an extra folder.

Your structure now looks like:

options-platform/
├── backend/
│   ├── __init__.py
│   ├── settings.py
│   ├── urls.py
│   ├── wsgi.py
│   └── asgi.py
├── manage.py
├── venv/

manage.py — Used to run server, migrate, and interact with Django
settings.py — Where you'll configure database, apps, etc.

==================================================================
🧱 Step 4: Create Your PostgreSQL Database
==================================================================

💡 Why?
PostgreSQL will store your user data, option contracts, screeners, etc.

Open your SQL client (pgAdmin, DBeaver, psql) and run:

CREATE DATABASE options_db;
CREATE USER options_user WITH PASSWORD 'your_password';
ALTER ROLE options_user SET client_encoding TO 'utf8';
ALTER ROLE options_user SET default_transaction_isolation TO 'read committed';
ALTER ROLE options_user SET timezone TO 'UTC';
GRANT ALL PRIVILEGES ON DATABASE options_db TO options_user;

✅ This creates:
- A new database called `options_db`
- A user with login credentials
- Proper permissions for the user

==================================================================
✍️ Step 5: Configure DATABASES in Django settings
==================================================================

Open backend/settings.py and scroll to the `DATABASES` section.

Replace it with:

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.postgresql_psycopg2',
        'NAME': 'options_db',
        'USER': 'options_user',
        'PASSWORD': 'your_password',
        'HOST': 'localhost',
        'PORT': '5432',
    }
}

💡 Why?
You're telling Django how to connect to your local PostgreSQL server.

==================================================================
🚀 Step 6: Run Initial Migrations
==================================================================

💡 Why?
Django comes with built-in apps like auth, sessions, admin. You need to create their tables.

Run:
python manage.py migrate

You should see output like:
Applying auth.0001_initial... OK

This sets up:
- auth_user table (users)
- session tracking
- permissions

==================================================================
🧪 Step 7: Run Django's Dev Server
==================================================================

💡 Why?
To verify everything is connected and running properly.

Run:
python manage.py runserver

Visit: http://127.0.0.1:8000/

If you see the Django welcome screen — you're good!

==================================================================
📋 Step 8: Create Your First App — contracts
==================================================================

💡 Why?
Django organizes code into "apps" — modular chunks that do one thing well.

Run:
python manage.py startapp contracts

Your structure now includes:

contracts/
├── admin.py
├── apps.py
├── models.py
├── views.py
├── tests.py

==================================================================
🧠 Step 9: Register the App in settings.py
==================================================================

Open backend/settings.py, find INSTALLED_APPS and add:

'contracts',

It should now look like:

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    ...
    'contracts',
]

==================================================================
🔍 Bonus Tips
==================================================================

✅ Create a superuser for admin:
python manage.py createsuperuser

✅ Test database connection:
python manage.py dbshell

✅ If you want to use environment variables:
pip install python-decouple
Then in settings.py:
from decouple import config

And use:
'PASSWORD': config('DB_PASSWORD'),

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ Installed Django & PostgreSQL
✔ Created a virtual environment
✔ Connected Django to PostgreSQL
✔ Created and registered your first app
✔ Ran the development server

You’re now ready to build your models and APIs in Day 2.
"""

# Save to .txt file
txt_path = "/mnt/data/Day_1_Django_Setup_Detailed.txt"
with open(txt_path, "w") as f:
    f.write(detailed_day_1_text)

txt_path
