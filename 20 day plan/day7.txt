
📘 Day 7: Adding Forms to Create Screener and Watchlist Entries (Longform Learning Guide)

==================================================================
📌 Objective
==================================================================
Today, you will:
- Create input forms in React for adding new Screener and Watchlist entries
- Build Django API endpoints to accept POST requests
- Validate and submit form data
- Display newly added entries immediately after submission

==================================================================
🧠 Why Add Forms?
==================================================================
Forms allow users to personalize their experience by:
- Saving filters and watchlists they care about
- Comparing multiple strategies side-by-side
- Interacting directly with the database through the UI

==================================================================
📋 Step 1: Update Django Views to Accept POST Requests
==================================================================

You already used `ListCreateAPIView` in `views.py` (Day 3), so POST is already supported!

However, ensure CSRF protection and CORS headers are set up.

In `settings.py`:
```python
CORS_ALLOW_ALL_ORIGINS = True  # Dev only
```

==================================================================
🗂️ Step 2: Add Axios POST Functions to api.js
==================================================================

Open `src/services/api.js` and add:

```javascript
export const createScreener = (data) => axios.post(`${API_BASE_URL}/screener/`, data);
export const createWatchlist = (data) => axios.post(`${API_BASE_URL}/watchlist/`, data);
```

==================================================================
📁 Step 3: Create ScreenerForm Component
==================================================================

Inside `src/components/`, create `ScreenerForm.js`:

```javascript
import React, { useState } from 'react';
import { createScreener } from '../services/api';

function ScreenerForm({ onAdd }) {
  const [form, setForm] = useState({
    label: '',
    tickers: '',
    strike_pct: 0.1,
    days_until_exp: 30,
    days_to_gain: 20,
    stock_gain_pct: 0.08,
    allocation: 1000,
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      ...form,
      tickers: form.tickers.split(',').map(t => t.trim()),
      strike_pct: parseFloat(form.strike_pct),
      stock_gain_pct: parseFloat(form.stock_gain_pct),
      allocation: parseFloat(form.allocation),
      days_to_gain: parseInt(form.days_to_gain),
      days_until_exp: parseInt(form.days_until_exp),
      user: 1  // Temporary, until auth is integrated
    };
    createScreener(payload)
      .then(() => {
        alert("Screener added!");
        onAdd();  // reload data
      })
      .catch((err) => alert("Failed to add screener"));
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Add New Screener</h3>
      <input name="label" placeholder="Label" onChange={handleChange} />
      <input name="tickers" placeholder="Tickers (comma-separated)" onChange={handleChange} />
      <input name="strike_pct" placeholder="Strike % (e.g. 0.1)" onChange={handleChange} />
      <input name="days_until_exp" placeholder="Days Until Exp" onChange={handleChange} />
      <input name="days_to_gain" placeholder="Days to Gain" onChange={handleChange} />
      <input name="stock_gain_pct" placeholder="Expected Stock Gain %" onChange={handleChange} />
      <input name="allocation" placeholder="Allocation ($)" onChange={handleChange} />
      <button type="submit">Add</button>
    </form>
  );
}

export default ScreenerForm;
```

==================================================================
📁 Step 4: Create WatchlistForm Component
==================================================================

Create `WatchlistForm.js`:

```javascript
import React, { useState } from 'react';
import { createWatchlist } from '../services/api';

function WatchlistForm({ onAdd }) {
  const [form, setForm] = useState({
    ticker: '',
    option_type: 'call',
    strike: '',
    expiration: '',
    days_to_gain: '',
    number_of_contracts: '',
    average_cost_per_contract: ''
  });

  const handleChange = (e) => {
    const { name, value } = e.target;
    setForm({ ...form, [name]: value });
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const payload = {
      ...form,
      strike: parseFloat(form.strike),
      number_of_contracts: parseInt(form.number_of_contracts),
      average_cost_per_contract: parseFloat(form.average_cost_per_contract),
      user: 1  // Temporary
    };
    createWatchlist(payload)
      .then(() => {
        alert("Watchlist added!");
        onAdd();  // refresh
      })
      .catch(() => alert("Failed to add watchlist entry"));
  };

  return (
    <form onSubmit={handleSubmit}>
      <h3>Add to Watchlist</h3>
      <input name="ticker" placeholder="Ticker" onChange={handleChange} />
      <select name="option_type" onChange={handleChange}>
        <option value="call">Call</option>
        <option value="put">Put</option>
      </select>
      <input name="strike" placeholder="Strike Price" onChange={handleChange} />
      <input name="expiration" type="date" onChange={handleChange} />
      <input name="days_to_gain" placeholder="Days to Gain" onChange={handleChange} />
      <input name="number_of_contracts" placeholder="# Contracts" onChange={handleChange} />
      <input name="average_cost_per_contract" placeholder="Avg Cost/Contract" onChange={handleChange} />
      <button type="submit">Add</button>
    </form>
  );
}

export default WatchlistForm;
```

==================================================================
🧱 Step 5: Render Forms in App.js or Dashboard
==================================================================

```javascript
import React, { useState } from 'react';
import ScreenerForm from './components/ScreenerForm';
import WatchlistForm from './components/WatchlistForm';
import ScreenerTable from './components/ScreenerTable';
import WatchlistTable from './components/WatchlistTable';

function App() {
  const [reload, setReload] = useState(false);

  const handleReload = () => setReload(!reload);

  return (
    <div className="App">
      <h1>Options Analysis Platform</h1>
      <ScreenerForm onAdd={handleReload} />
      <ScreenerTable key={reload} />
      <WatchlistForm onAdd={handleReload} />
      <WatchlistTable key={reload} />
    </div>
  );
}

export default App;
```

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ Created forms for Screener and Watchlist data  
✔ Used Axios to submit POST requests  
✔ Automatically refreshed tables after submission  
✔ Validated and parsed numerical/string inputs  
✔ Laid groundwork for user login and saved dashboards

Next up: Day 8 – Implementing user authentication with Django Allauth and React login UI.
