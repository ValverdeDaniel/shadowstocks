=========================================
âœ… WATCHLIST GROUPS EXPANSION PLAN & CODE
=========================================

1) MODELS
---------
You've already added WatchlistGroup in models.py:

class WatchlistGroup(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    name = models.CharField(max_length=100)
    contracts = models.ManyToManyField(SavedContract, related_name="groups")
    created_at = models.DateTimeField(auto_now_add=True)

    def __str__(self):
        return f"Group: {self.name}"


2) SERIALIZERS
--------------
In contracts/serializers.py (already included):

class WatchlistGroupSerializer(serializers.ModelSerializer):
    contracts = SavedContractSerializer(many=True, read_only=True)
    class Meta:
        model = WatchlistGroup
        fields = '__all__'


3) VIEWS
--------
In contracts/views.py (already included, but hereâ€™s expanded explanation):

- WatchlistGroupListCreateAPIView
  Lists and creates groups.

- WatchlistGroupUpdateDeleteAPIView
  Supports retrieving, updating (name or contracts), and deleting groups.

âœ… ADD endpoint to update contracts in a group:

class WatchlistGroupUpdateContractsAPIView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request, pk):
        try:
            group = WatchlistGroup.objects.get(user=request.user, pk=pk)
        except WatchlistGroup.DoesNotExist:
            return Response({'error': 'Group not found'}, status=404)

        contract_ids = request.data.get('contract_ids', [])
        contracts = SavedContract.objects.filter(user=request.user, id__in=contract_ids)
        group.contracts.set(contracts)
        group.save()

        serializer = WatchlistGroupSerializer(group)
        return Response(serializer.data, status=200)


4) URLS
-------
In contracts/urls.py, add:

urlpatterns += [
    ...
    path('watchlist-groups/<int:pk>/contracts/', views.WatchlistGroupUpdateContractsAPIView.as_view(), name='update-group-contracts'),
]


5) FRONTEND GROUP MANAGEMENT
----------------------------
Create new component WatchlistGroups.js
---------------------------------------
import React, { useState, useEffect } from 'react';

function WatchlistGroups({ savedContracts, onRunGroup }) {
  const [groups, setGroups] = useState([]);
  const [newGroupName, setNewGroupName] = useState('');

  useEffect(() => {
    const fetchGroups = async () => {
      try {
        const response = await fetch('/api/watchlist-groups/');
        const data = await response.json();
        setGroups(data);
      } catch (error) {
        console.error('Error fetching groups:', error);
      }
    };
    fetchGroups();
  }, []);

  const createGroup = async () => {
    try {
      const response = await fetch('/api/watchlist-groups/', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ name: newGroupName }),
      });
      if (!response.ok) throw new Error('Failed to create group');
      const data = await response.json();
      setGroups((prev) => [...prev, data]);
      setNewGroupName('');
    } catch (error) {
      console.error('Error creating group:', error);
    }
  };

  const deleteGroup = async (id) => {
    try {
      const response = await fetch(`/api/watchlist-groups/${id}/`, {
        method: 'DELETE',
      });
      if (!response.ok) throw new Error('Failed to delete group');
      setGroups((prev) => prev.filter((g) => g.id !== id));
    } catch (error) {
      console.error('Error deleting group:', error);
    }
  };

  const updateGroupContracts = async (groupId, contractIds) => {
    try {
      const response = await fetch(`/api/watchlist-groups/${groupId}/contracts/`, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ contract_ids: contractIds }),
      });
      if (!response.ok) throw new Error('Failed to update group contracts');
      alert('Group contracts updated!');
    } catch (error) {
      console.error('Error updating group contracts:', error);
    }
  };

  return (
    <div className="mt-8">
      <h3 className="heading-lg">ðŸ“‚ Watchlist Groups</h3>
      <div className="flex gap-4 mb-4">
        <input
          className="input"
          placeholder="New Group Name"
          value={newGroupName}
          onChange={(e) => setNewGroupName(e.target.value)}
        />
        <button onClick={createGroup} className="btn-primary">Create Group</button>
      </div>

      {groups.map((group) => (
        <div key={group.id} className="card mb-4">
          <div className="flex justify-between items-center mb-2">
            <h4 className="text-primary font-bold">{group.name}</h4>
            <div className="flex gap-2">
              <button onClick={() => deleteGroup(group.id)} className="btn-red">Delete</button>
              <button onClick={() => onRunGroup(group.id)} className="btn-blue">Run Group</button>
            </div>
          </div>

          <div className="flex flex-wrap gap-2 mb-2">
            {savedContracts.map((c) => (
              <label key={c.id} className="flex items-center gap-1">
                <input
                  type="checkbox"
                  checked={group.contracts.some((gc) => gc.id === c.id)}
                  onChange={(e) => {
                    const currentIds = group.contracts.map((gc) => gc.id);
                    let updatedIds;
                    if (e.target.checked) {
                      updatedIds = [...currentIds, c.id];
                    } else {
                      updatedIds = currentIds.filter((id) => id !== c.id);
                    }
                    updateGroupContracts(group.id, updatedIds);
                  }}
                />
                {c.ticker} {c.option_type}
              </label>
            ))}
          </div>
        </div>
      ))}
    </div>
  );
}

export default WatchlistGroups;


6) RUN A GROUP
---------------
In Watchlist.js, add a handler to run a group:

const handleRunGroup = async (groupId) => {
  try {
    const response = await fetch(`/api/watchlist-groups/${groupId}/`);
    if (!response.ok) throw new Error('Failed to fetch group details');
    const group = await response.json();
    const contractIds = group.contracts.map((c) => c.id);

    const bulkResponse = await fetch('/api/run-bulk-watchlist/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ contract_ids: contractIds }),
    });
    if (!bulkResponse.ok) throw new Error('Failed to run group contracts');
    const data = await bulkResponse.json();
    setWatchlistItems((prev) => [...prev, ...data]);
  } catch (error) {
    console.error('Error running group:', error);
  }
};

Render WatchlistGroups.js:

<WatchlistGroups savedContracts={savedContracts} onRunGroup={handleRunGroup} />


7) FINAL NOTES
---------------
âœ… This extension lets you:
- Create groups of saved contracts
- Assign contracts to groups
- Delete groups
- Run simulations on entire groups with one click

ðŸš€ Congratulations, youâ€™ve got full watchlist grouping functionality!
