📘 Day 2: Frontend Fetch & Display for Screener Results (Longform Guide)

\==================================================================
📌 Objective
============

Today, you will:

* Build a React UI to call the new Django screener endpoint (from Day 1)
* Display the returned screener results in a dynamic, styled table
* Ensure proper loading states and error handling
* Set up basic responsive layout in Tailwind CSS

\==================================================================
🧱 Step 1: Confirm Backend Endpoint
===================================

From Day 1, you exposed the `analyze_options_unicorn` function through this Django endpoint:

```python
path("api/screener/run/", run_screener, name="run_screener")
```

Expected POST input:

```json
{
  "tickers": ["AAPL"],
  "option_type": "call",
  "days_until_exp": 90,
  "strike_pct": 0.1,
  "days_to_gain": 30,
  "stock_gain_pct": 0.08,
  "allocation": 1000
}
```

Returns:

```json
{
  "columns": [...],
  "rows": [...]
}
```

\==================================================================
📁 Step 2: Add Function to `api.js`
===================================

Open `src/services/api.js` and add:

```javascript
export const runScreenerBackend = (data) =>
  axios.post(`${API_BASE_URL}/screener/run/`, data);
```

\==================================================================
📁 Step 3: Create `ScreenerResults.js` Component
================================================

Create a new file in `src/components/` called `ScreenerResults.js`:

```jsx
import React, { useState } from 'react';
import { runScreenerBackend } from '../services/api';

function ScreenerResults() {
  const [formData, setFormData] = useState({
    tickers: 'AAPL',
    option_type: 'call',
    days_until_exp: 90,
    strike_pct: 0.1,
    days_to_gain: 30,
    stock_gain_pct: 0.08,
    allocation: 1000
  });
  const [results, setResults] = useState(null);
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLoading(true);
    setError(null);
    try {
      const formatted = {
        ...formData,
        tickers: formData.tickers.split(',').map(t => t.trim()),
        strike_pct: parseFloat(formData.strike_pct),
        stock_gain_pct: parseFloat(formData.stock_gain_pct),
        allocation: parseFloat(formData.allocation),
        days_to_gain: parseInt(formData.days_to_gain),
        days_until_exp: parseInt(formData.days_until_exp)
      };
      const res = await runScreenerBackend(formatted);
      setResults(res.data);
    } catch (err) {
      setError("Failed to fetch results.");
    } finally {
      setLoading(false);
    }
  };

  return (
    <div className="p-4 text-white">
      <h2 className="text-xl font-semibold mb-4">Run Custom Screener</h2>
      <form onSubmit={handleSubmit} className="grid grid-cols-2 gap-4 mb-6">
        {Object.entries(formData).map(([key, value]) => (
          <input
            key={key}
            name={key}
            placeholder={key}
            value={value}
            onChange={handleChange}
            className="p-2 bg-gray-800 border border-gray-600 rounded"
          />
        ))}
        <button type="submit" className="col-span-2 bg-green-600 hover:bg-green-700 p-2 rounded">
          Run Screener
        </button>
      </form>

      {loading && <p>Loading...</p>}
      {error && <p className="text-red-400">{error}</p>}

      {results && (
        <div className="overflow-x-auto">
          <table className="min-w-full table-auto border border-gray-700">
            <thead>
              <tr className="bg-gray-900 text-left">
                {results.columns.map((col) => (
                  <th key={col} className="p-2 border-b border-gray-700">{col}</th>
                ))}
              </tr>
            </thead>
            <tbody>
              {results.rows.map((row, idx) => (
                <tr key={idx} className="border-t border-gray-700 hover:bg-[#1f1f1f]">
                  {row.map((cell, i) => (
                    <td key={i} className="p-2">{cell}</td>
                  ))}
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
}

export default ScreenerResults;
```

\==================================================================
📄 Step 4: Add to App.js or Dashboard
=====================================

Open `App.js` and import the new component:

```jsx
import ScreenerResults from './components/ScreenerResults';
```

Then render it:

```jsx
<ScreenerResults />
```

\==================================================================
✅ What You’ve Accomplished
==========================

✔ Connected your frontend to the advanced backend screener logic
✔ Passed dynamic parameters and rendered real-time results
✔ Styled an interactive table with Tailwind CSS
✔ Set up for future enhancements like saving runs or visualizing graphs

Next up: Day 3 – Enhancing table UX and enabling PDF/CSV exports.
