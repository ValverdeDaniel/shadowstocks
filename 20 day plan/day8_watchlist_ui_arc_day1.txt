=== üóìÔ∏è Day 1: Backend Model & Serializer Refactor ===

üéØ Goal:
---------
Update the SavedContract model to track time-sensitive data and support countdown/reset/refresh logic.

==============================
üõ† Code Changes
==============================

‚úÖ 1. Update SavedContract in models.py

Replace your existing SavedContract model with:

--------------------------------------------------
class SavedContract(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE, null=True, blank=True)
    label = models.CharField(max_length=100, blank=True, default='')
    ticker = models.CharField(max_length=10)
    option_type = models.CharField(max_length=4)
    strike = models.FloatField()
    expiration = models.DateField()
    initial_days_to_gain = models.IntegerField()
    number_of_contracts = models.IntegerField(default=1)
    average_cost_per_contract = models.FloatField(null=True, blank=True)
    initial_cost_per_contract = models.FloatField()
    first_added_to_group_date = models.DateTimeField(auto_now_add=True)
    last_reset_date = models.DateTimeField(auto_now_add=True)
    last_refresh_date = models.DateTimeField(auto_now=True)
    created_at = models.DateTimeField(auto_now_add=True)

    def dynamic_days_to_gain(self):
        from django.utils import timezone
        elapsed = (timezone.now().date() - self.last_reset_date.date()).days
        return max(0, self.initial_days_to_gain - elapsed)
--------------------------------------------------

üß† Explanation:
Splits the static days value from the live countdown. Tracks reset/refresh history and stores a consistent initial contract cost.

‚úÖ 2. Run Migrations

--------------------------------------------------
python manage.py makemigrations
python manage.py migrate
--------------------------------------------------

‚úÖ 3. Update SavedContractSerializer in serializers.py

Make sure your serializer looks like this:

--------------------------------------------------
class SavedContractSerializer(serializers.ModelSerializer):
    dynamic_days_to_gain = serializers.SerializerMethodField()

    class Meta:
        model = SavedContract
        fields = '__all__'

    def get_dynamic_days_to_gain(self, obj):
        return obj.dynamic_days_to_gain()
--------------------------------------------------

üß† Explanation:
Adds `dynamic_days_to_gain` as a computed field available in API responses without storing it in the DB.

==============================
‚úÖ Testing Instructions
==============================

1. Launch Django shell:
--------------------------------------------------
python manage.py shell
--------------------------------------------------

2. Run the following:

--------------------------------------------------
from watchlist.models import SavedContract
from django.utils import timezone

c = SavedContract.objects.create(
    ticker="AAPL",
    option_type="call",
    strike=200,
    expiration="2025-12-20",
    initial_days_to_gain=30,
    number_of_contracts=1,
    average_cost_per_contract=None,
    initial_cost_per_contract=5.0
)

print(c.dynamic_days_to_gain())
--------------------------------------------------

3. You should see:
- Output: 30 (or fewer if days have passed since creation)

==============================
‚úÖ Day 1 Complete
==============================

Next: Day 2 will cover PATCH endpoints for reset & refresh, and automatic cost assignment if not provided.
