
📘 Day 12: Linking Stripe Checkout to Django Users Using Metadata (Longform Learning Guide)

==================================================================
📌 Objective
==================================================================
Today, you will:
- Attach user IDs to Stripe Checkout sessions using metadata
- Retrieve the correct user in the webhook via metadata
- Ensure subscription data is linked to the correct Django user
- Prepare for full user-specific Stripe billing history

==================================================================
🧠 Why Metadata?
==================================================================
When Stripe sends webhook events (e.g., subscription completed), it includes only Stripe's data — not your Django user’s ID.

By sending metadata (e.g., `{ user_id: 5 }`) during the checkout session, you can reconnect the dots and update the correct user’s subscription status.

==================================================================
🧱 Step 1: Modify Checkout Session Creation to Include Metadata
==================================================================

In your Django `views.py`, update `CreateCheckoutSessionView`:

```python
from rest_framework.permissions import IsAuthenticated

class CreateCheckoutSessionView(APIView):
    permission_classes = [IsAuthenticated]

    def post(self, request):
        user = request.user

        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'unit_amount': 500,
                    'product_data': {
                        'name': 'Options Analysis Premium Plan',
                    },
                },
                'quantity': 1,
            }],
            mode='subscription',
            metadata={
                'user_id': user.id
            },
            success_url=settings.DOMAIN + '/success',
            cancel_url=settings.DOMAIN + '/cancel',
        )
        return Response({'id': session.id})
```

This embeds the `user_id` inside the checkout session.

==================================================================
🔍 Step 2: Retrieve Metadata in the Webhook
==================================================================

Update your webhook handler (`stripe_webhook`) in `views.py`:

```python
if event['type'] == 'checkout.session.completed':
    session = event['data']['object']
    metadata = session.get('metadata', {})
    user_id = metadata.get('user_id')

    customer_id = session.get('customer')
    subscription_id = session.get('subscription')

    try:
        user = User.objects.get(id=user_id)
        Subscription.objects.update_or_create(
            user=user,
            defaults={
                'stripe_customer_id': customer_id,
                'stripe_subscription_id': subscription_id,
                'is_active': True,
            }
        )
    except User.DoesNotExist:
        print(f"User ID {user_id} not found.")
```

This makes sure the correct Django user gets updated with Stripe status.

==================================================================
✅ Step 3: Verify the Flow
==================================================================

1. Login as a user
2. Click "Subscribe" to trigger checkout
3. After payment success, inspect the webhook payload via Stripe CLI or logs
4. Confirm the user ID was received in metadata
5. Check your database → the correct user's subscription should now be active

==================================================================
🧪 Step 4: Add More Metadata (Optional)
==================================================================

You can also include:

```python
metadata = {
    'user_id': user.id,
    'username': user.username,
    'email': user.email
}
```

Useful for syncing user info across Stripe’s dashboard and receipts.

==================================================================
📁 Step 5: Show Plan Status in React UI (Optional)
==================================================================

In your Django `/api/user/` endpoint (or extend token auth response), return:

```python
{
    "username": "daniel",
    "is_premium": true
}
```

In React, show/hide premium tools like:

```jsx
{user.is_premium ? <AdvancedScreener /> : <UpgradeBanner />}
```

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ Linked Stripe checkout to specific Django users  
✔ Passed and received metadata via Stripe sessions and webhooks  
✔ Correctly updated user subscriptions in your DB  
✔ Set the stage for future billing dashboards, usage tracking, and receipts  
✔ Strengthened account-based subscription control

Next up: Day 13 – designing a database model for saving users’ favorite stock setups and queries!
