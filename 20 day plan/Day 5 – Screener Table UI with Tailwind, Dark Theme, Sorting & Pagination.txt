
📘 Day 5: Building the Screener Table UI in React (Updated with Tailwind, Sorting, and Pagination)

==================================================================
📌 Objective
==================================================================
Today, you will:
- Build a responsive, styled screener results table in React
- Use Tailwind CSS for Spotify-inspired dark theme styling
- Add sorting and pagination functionality
- Format percentages and currency in a readable way
- Handle loading and error states gracefully

==================================================================
🧠 Why Build a Screener Table?
==================================================================
The ScreenerTable is the centerpiece of your platform’s UI, displaying option trade ideas in a clean, interactive, and dynamic format. It connects your backend (Day 3) to the user interface.

==================================================================
📁 Step 1: Create ScreenerTable Component
==================================================================

In `src/components/`, create a file named:

`ScreenerTable.js`

Paste this component code, which includes:
- Tailwind styling
- Sorting by column
- Pagination logic
- Clean percentage/$ formatting

```jsx
import React, { useEffect, useState } from 'react';
import { getScreener } from '../services/api';

function ScreenerTable() {
  const [data, setData] = useState([]);
  const [sortedBy, setSortedBy] = useState(null);
  const [sortAsc, setSortAsc] = useState(true);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [currentPage, setCurrentPage] = useState(1);
  const rowsPerPage = 10;

  useEffect(() => {
    getScreener()
      .then((response) => {
        setData(response.data);
        setLoading(false);
      })
      .catch((err) => {
        setError("Failed to load screener data.");
        setLoading(false);
      });
  }, []);

  const handleSort = (key) => {
    if (sortedBy === key) {
      setSortAsc(!sortAsc);
    } else {
      setSortedBy(key);
      setSortAsc(true);
    }
  };

  const sortedData = [...data].sort((a, b) => {
    if (!sortedBy) return 0;
    const aVal = a[sortedBy];
    const bVal = b[sortedBy];
    return sortAsc
      ? aVal > bVal ? 1 : -1
      : aVal < bVal ? 1 : -1;
  });

  const totalPages = Math.ceil(sortedData.length / rowsPerPage);
  const paginatedData = sortedData.slice(
    (currentPage - 1) * rowsPerPage,
    currentPage * rowsPerPage
  );

  if (loading) return <p className="text-gray-300">Loading screener results...</p>;
  if (error) return <p className="text-red-400">{error}</p>;

  return (
    <div className="p-4 text-gray-100">
      <h2 className="text-2xl font-bold text-[#1DB954] mb-4">📈 Screener Results</h2>
      <div className="overflow-x-auto rounded-md shadow-md">
        <table className="min-w-full border border-gray-700 text-sm bg-[#121212]">
          <thead>
            <tr className="bg-[#1e1e1e] text-gray-300">
              {['label', 'tickers', 'strike_pct', 'days_until_exp', 'days_to_gain', 'stock_gain_pct', 'allocation'].map((key) => (
                <th
                  key={key}
                  onClick={() => handleSort(key)}
                  className="px-4 py-2 text-left cursor-pointer"
                >
                  {key.replace(/_/g, ' ').replace(/\w/g, l => l.toUpperCase())}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {paginatedData.map((entry, i) => (
              <tr key={i} className="border-t border-gray-700 hover:bg-[#1f1f1f] transition">
                <td className="px-4 py-2">{entry.label}</td>
                <td className="px-4 py-2">{entry.tickers.join(', ')}</td>
                <td className="px-4 py-2">{(entry.strike_pct * 100).toFixed(1)}%</td>
                <td className="px-4 py-2">{entry.days_until_exp} days</td>
                <td className="px-4 py-2">{entry.days_to_gain} days</td>
                <td className="px-4 py-2">{(entry.stock_gain_pct * 100).toFixed(1)}%</td>
                <td className="px-4 py-2">${entry.allocation.toLocaleString()}</td>
              </tr>
            ))}
          </tbody>
        </table>
      </div>

      <div className="flex justify-between items-center mt-4 text-sm">
        <button
          onClick={() => setCurrentPage((p) => Math.max(p - 1, 1))}
          className="px-3 py-1 bg-gray-700 rounded hover:bg-gray-600 disabled:opacity-40"
          disabled={currentPage === 1}
        >
          ← Prev
        </button>
        <span>
          Page {currentPage} of {totalPages}
        </span>
        <button
          onClick={() => setCurrentPage((p) => Math.min(p + 1, totalPages))}
          className="px-3 py-1 bg-gray-700 rounded hover:bg-gray-600 disabled:opacity-40"
          disabled={currentPage === totalPages}
        >
          Next →
        </button>
      </div>
    </div>
  );
}

export default ScreenerTable;
```

==================================================================
🎨 Step 2: Tailwind CSS Setup (Dark Theme)
==================================================================

Ensure you’ve set up Tailwind in your frontend:

1. Inside your frontend directory, run:

```
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

2. In `tailwind.config.js`, set content paths and enable dark mode:

```js
module.exports = {
  content: ["./src/**/*.{js,jsx,ts,tsx}"],
  darkMode: 'class',
  theme: {
    extend: {},
  },
  plugins: [],
}
```

3. In `index.css`, replace everything with:

```css
@tailwind base;
@tailwind components;
@tailwind utilities;
```

==================================================================
⚙️ Step 3: Add to App.js
==================================================================

Replace App.js with:

```jsx
import React from 'react';
import ScreenerTable from './components/ScreenerTable';

function App() {
  return (
    <div className="bg-black min-h-screen p-6">
      <h1 className="text-4xl font-bold text-[#1DB954] mb-6">Options Analysis Platform</h1>
      <ScreenerTable />
    </div>
  );
}

export default App;
```

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ Tailwind CSS working in your React app  
✔ Spotify-style dark theme applied  
✔ Screener results table rendered  
✔ Sorting by column  
✔ Pagination included  
✔ Fully mobile-responsive and styled

Coming up next (Day 6): you’ll build the WatchlistTable component and add simulated contract logic.
