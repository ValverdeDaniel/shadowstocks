=== 🗓️ Day 3: Frontend Integration — Countdown, Reset, Refresh Buttons ===

🎯 GOALS:
---------
1. Display new contract fields in WatchlistGroups.js
2. Show countdown based on dynamic_days_to_gain
3. Add "Reset Countdown" and "Refresh Data" buttons per contract
4. Connect those buttons to backend PATCH endpoints

==============================
🧠 WHY THESE CHANGES?
==============================
- Users need visibility into each contract’s cost, age, and status
- Countdown helps them time exits or rebalancing
- Buttons allow them to refresh prices or restart the timer without editing the contract

==============================
🛠️ PART 1: Update Contract Display in WatchlistGroups.js
==============================

Replace this part:
--------------------------------------------------
<span className="text-sm">
  {c.ticker} {c.option_type} {c.strike}
</span>
--------------------------------------------------

With this full block:
--------------------------------------------------
<div className="text-sm leading-snug">
  <div><strong>{c.ticker}</strong> {c.option_type?.toUpperCase()} @ {c.strike}</div>
  <div className="text-xs text-muted">
    Exp: {c.expiration} • Qty: {c.number_of_contracts} • Cost: ${c.initial_cost_per_contract}
  </div>
  <div className="text-xs text-muted">
    Added: {c.first_added_to_group_date?.slice(0, 10)} • Reset: {c.last_reset_date?.slice(0, 10)}
  </div>
  <div className="text-xs text-muted">
    Days Left: {c.dynamic_days_to_gain} • Last Refresh: {c.last_refresh_date?.slice(0, 10)}
  </div>
</div>
--------------------------------------------------

==============================
🛠️ PART 2: Add Reset & Refresh Buttons
==============================

Add below the contract display:

--------------------------------------------------
<div className="flex gap-2 mt-1">
  <button
    onClick={() => handleResetDays(c.id)}
    className="btn-blue text-xs"
  >
    Reset Countdown
  </button>
  <button
    onClick={() => handleRefresh(c.id)}
    className="btn-secondary text-xs"
  >
    Refresh Data
  </button>
</div>
--------------------------------------------------

==============================
🛠️ PART 3: Create Handlers in WatchlistGroups.js
==============================

Above the return statement:

--------------------------------------------------
const handleResetDays = async (contractId) => {
  try {
    const res = await fetch(`/api/saved-contracts/${contractId}/reset-days/`, { method: 'PATCH' });
    if (!res.ok) throw new Error('Reset failed');
    await fetchGroups(); // refresh the view
  } catch (err) {
    console.error("Error resetting countdown:", err);
    alert("Reset failed.");
  }
};

const handleRefresh = async (contractId) => {
  try {
    const res = await fetch(`/api/saved-contracts/${contractId}/refresh/`, { method: 'PATCH' });
    if (!res.ok) throw new Error('Refresh failed');
    await fetchGroups(); // refresh the view
  } catch (err) {
    console.error("Error refreshing contract:", err);
    alert("Refresh failed.");
  }
};
--------------------------------------------------

==============================
🔬 TESTING INSTRUCTIONS
==============================

✅ 1. Load /watchlist route in browser  
You should now see:
- Expiration, Qty, Initial Cost, Dates, Countdown

✅ 2. Click “Reset Countdown”  
- Contract’s Days Left should reset to full `initial_days_to_gain`  
- `last_reset_date` should update

✅ 3. Click “Refresh Data”  
- Contract’s `average_cost_per_contract` should update (backend dummy is 4.25)  
- `last_refresh_date` should update

✅ 4. Confirm live countdown  
- Wait 1 day → Days Remaining should decrement based on `last_reset_date`

==============================
✅ Day 3 Complete!
==============================

Tomorrow: Final polish.
- Input dropdowns & validation in WatchlistParamsForm.js
- Disable broken submits
- Optional: tooltips, formatting, or history indicators
