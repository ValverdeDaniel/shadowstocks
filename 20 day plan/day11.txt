
üìò Day 11: Stripe Webhook Listener to Track Subscription Status (Longform Learning Guide)

==================================================================
üìå Objective
==================================================================
Today, you will:
- Set up a webhook endpoint to receive Stripe subscription events
- Handle user upgrades and cancellations
- Automatically update your database with active/inactive status
- Secure and test the webhook endpoint locally

==================================================================
üß† Why Webhooks Matter?
==================================================================
Stripe sends real-time updates for:
- New subscriptions
- Subscription cancellations
- Payment failures or renewals

Your app needs to listen to these updates to reflect users‚Äô actual premium access.

==================================================================
‚öôÔ∏è Step 1: Enable Webhooks in Stripe Dashboard
==================================================================

1. Visit https://dashboard.stripe.com/test/webhooks
2. Click "Add endpoint"
3. URL: `http://localhost:8000/api/stripe/webhook/`
4. Events to send:
   - `checkout.session.completed`
   - `customer.subscription.updated`
   - `customer.subscription.deleted`

Copy the **Signing Secret**. You‚Äôll need it in Django.

==================================================================
üîê Step 2: Store Webhook Secret in Django Settings
==================================================================

In `settings.py`:

```python
STRIPE_WEBHOOK_SECRET = 'whsec_...'
```

==================================================================
üì® Step 3: Add Webhook Listener View
==================================================================

In `views.py`:

```python
from django.views.decorators.csrf import csrf_exempt
from django.http import HttpResponse
import stripe
from django.conf import settings
from .models import Subscription, User

@csrf_exempt
def stripe_webhook(request):
    payload = request.body
    sig_header = request.META['HTTP_STRIPE_SIGNATURE']
    event = None

    try:
        event = stripe.Webhook.construct_event(
            payload, sig_header, settings.STRIPE_WEBHOOK_SECRET
        )
    except ValueError:
        return HttpResponse(status=400)
    except stripe.error.SignatureVerificationError:
        return HttpResponse(status=400)

    # Handle the event
    if event['type'] == 'checkout.session.completed':
        session = event['data']['object']
        customer_id = session.get('customer')
        subscription_id = session.get('subscription')

        # You would track which user initiated the checkout using metadata (Day 12)
        # For now, assume a single-user test case
        user = User.objects.first()
        Subscription.objects.update_or_create(
            user=user,
            defaults={
                'stripe_customer_id': customer_id,
                'stripe_subscription_id': subscription_id,
                'is_active': True,
            }
        )

    elif event['type'] == 'customer.subscription.deleted':
        subscription = event['data']['object']
        stripe_subscription_id = subscription['id']
        Subscription.objects.filter(stripe_subscription_id=stripe_subscription_id).update(is_active=False)

    return HttpResponse(status=200)
```

==================================================================
üõ£Ô∏è Step 4: Wire Up the URL
==================================================================

In `urls.py`:

```python
from .views import stripe_webhook

urlpatterns = [
    ...
    path('api/stripe/webhook/', stripe_webhook, name='stripe-webhook'),
]
```

==================================================================
üß™ Step 5: Test Webhook Locally with Stripe CLI
==================================================================

Install Stripe CLI: https://stripe.com/docs/stripe-cli

Login to Stripe CLI:

```bash
stripe login
```

Forward events to your local server:

```bash
stripe listen --forward-to localhost:8000/api/stripe/webhook/
```

Simulate event:

```bash
stripe trigger checkout.session.completed
```

==================================================================
üìÅ Step 6: Add Admin Access to See Subscription Status (Optional)
==================================================================

In `admin.py`:

```python
from django.contrib import admin
from .models import Subscription

admin.site.register(Subscription)
```

==================================================================
‚úÖ What You‚Äôve Accomplished
==================================================================

‚úî Created a webhook listener for Stripe  
‚úî Updated user subscription status automatically  
‚úî Added secure Stripe signature verification  
‚úî Tested the full payment + webhook flow locally  
‚úî Prepared to use metadata to track users who subscribe (coming next)

Next up: Day 12 ‚Äì using metadata to link Stripe sessions to the correct Django user during checkout!
