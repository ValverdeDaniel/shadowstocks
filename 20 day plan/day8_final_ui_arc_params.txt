# Create a .txt-compatible implementation plan with detailed steps and code snippets

plan = """
===============================
ðŸ“ˆ Dynamic Options Form - Full Implementation Plan
===============================

GOAL:
-----
Enable a user flow where contract entry follows:
1. Select Ticker âžœ 2. Select Call/Put âžœ 3. Select Expiration âžœ 4. Select Strike
All inputs are visible, but some are grayed out and display red text until prerequisites are met.
Option chain data is pulled via the EODHD API and cached on the backend for up to 15 minutes.

===============================
STEP 1: Add Backend Endpoint to Fetch and Cache EODHD Option Chain
===============================

File: views.py

-----------------------------
from django.core.cache import cache
import requests
from django.conf import settings
from django.http import JsonResponse
from rest_framework.decorators import api_view

@api_view(['GET'])
def fetch_option_chain(request, ticker):
    cache_key = f"option_chain_{ticker.upper()}"
    cached_data = cache.get(cache_key)
    if cached_data:
        return JsonResponse(cached_data, safe=False)

    api_key = settings.EODHD_API_KEY
    url = f"https://eodhd.com/api/options-chain/{ticker.upper()}?api_token={api_key}&fmt=json"
    res = requests.get(url)

    if res.status_code != 200:
        return JsonResponse({'error': 'Failed to fetch option chain'}, status=res.status_code)

    data = res.json()
    cache.set(cache_key, data, timeout=60 * 15)  # cache for 15 minutes
    return JsonResponse(data, safe=False)
-----------------------------

Why:
- Reduce repeated API calls
- Speed up frontend
- Hide your API key

===============================
STEP 2: Register the Route in urls.py
===============================

File: urls.py

-----------------------------
path('options-chain/<str:ticker>/', views.fetch_option_chain, name='fetch-option-chain'),
-----------------------------

===============================
STEP 3: Add API Key in settings.py
===============================

File: settings.py

-----------------------------
EODHD_API_KEY = "your_eodhd_api_key_here"
-----------------------------

===============================
STEP 4: Update React Frontend
===============================

File: WatchlistParamsForm.js

Add State:
-----------------------------
const [optionChain, setOptionChain] = useState({});
const [expirations, setExpirations] = useState([]);
const [strikes, setStrikes] = useState([]);
const [currentPrice, setCurrentPrice] = useState(null);
-----------------------------

On Ticker Select:
-----------------------------
const handleTickerSelect = async (selected) => {
  const updated = [...contracts];
  updated[index].ticker = selected?.value || '';
  updated[index].expiration = '';
  updated[index].strike = '';
  setContracts(updated);

  if (!selected) return;

  const res = await fetch(`/api/options-chain/${selected.value}`);
  const data = await res.json();

  setOptionChain(data);
  setExpirations(data.expirationDates || []);
  setCurrentPrice(data.underlyingPrice);
};
-----------------------------

On Expiration Select:
-----------------------------
const handleExpirationSelect = (e) => {
  const selectedExp = e.target.value;
  const updated = [...contracts];
  updated[index].expiration = selectedExp;
  updated[index].strike = '';
  setContracts(updated);

  const chain = optionChain.options?.[selectedExp] || {};
  const optionList = [
    ...(chain.calls || []),
    ...(chain.puts || [])
  ];
  const uniqueStrikes = [
    ...new Set(optionList.map(opt => parseFloat(opt.strike)))
  ].sort((a, b) => a - b);

  setStrikes(uniqueStrikes);
};
-----------------------------

Dropdown Logic:
-----------------------------
<select
  name="expiration"
  disabled={!contract.option_type || expirations.length === 0}
  value={contract.expiration}
  onChange={handleExpirationSelect}
  className="input"
>
  <option value="">Select Expiration</option>
  {expirations.map((date) => (
    <option key={date} value={date}>{date}</option>
  ))}
</select>
{(!contract.option_type || expirations.length === 0) && (
  <p className="text-error text-xs mt-1">Select option type first</p>
)}
-----------------------------

Similar logic for Strike:
-----------------------------
<select
  name="strike"
  disabled={!contract.expiration || strikes.length === 0}
  value={contract.strike}
  onChange={(e) => handleContractChange(index, e)}
  className="input"
>
  <option value="">Select Strike</option>
  {strikes
    .filter(strike => Math.abs(strike - currentPrice) < currentPrice * 0.3)
    .map((strike) => (
      <option key={strike} value={strike}>{strike}</option>
    ))}
</select>
{(!contract.expiration || strikes.length === 0) && (
  <p className="text-error text-xs mt-1">Select expiration first</p>
)}
-----------------------------

===============================
SUMMARY OF FILES TO UPDATE
===============================

âœ” views.py       â€” Add option chain endpoint
âœ” urls.py        â€” Register endpoint
âœ” settings.py    â€” Store EODHD API key
âœ” WatchlistParamsForm.js â€” Add fetch + dropdown logic
âœ” SearchableTicker.js    â€” Already good!

âœ… DONE!

Let me know when you're ready and Iâ€™ll give you the updated WatchlistParamsForm.js file.
"""

# Save as .txt
with open("/mnt/data/watchlist_options_plan.txt", "w") as f:
    f.write(plan)

"/mnt/data/watchlist_options_plan.txt"

