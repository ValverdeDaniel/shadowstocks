WATCHLIST TABLE UPDATE PLAN
===========================

Goal:
-----
Update the WatchlistTable so that it matches the structure and functionality of the ScreenerResultsTable, using grouped columns, sorting, filtering, and CSV export. Also, integrate the ui.css styles for reusable UI design.

---

1. BACKEND UPDATES: watchlistanalysis.py
----------------------------------------
File: watchlistanalysis.py

a. Verify Column Names:
   - Ensure the output DataFrame from simulate_option_watchlist_single contains all required columns.
   - Final columns to include (and match Screener style):

     "Ticker", "Option Type", "Strike", "Expiration",
     "Underlying Scenario % Change", "Current Underlying",
     "Simulated Underlying (+)", "Simulated Underlying (-)",
     "Current Premium", "Simulated Premium (+)",
     "Simulated Premium (+) % Change", "Simulated Premium (-)",
     "Simulated Premium (-) % Change", "Days to Gain",
     "Number of Contracts", "Average Cost per Contract",
     "Equity Invested", "Simulated Equity (+)", "Simulated Equity (-)",
     "Bid", "Ask", "Volume", "Open Interest",
     "Implied Volatility", "Delta", "Theta", "Gamma", "Vega", "Rho"

b. Reorder Columns:
   - Update the column_order list at the end of simulate_option_watchlist_single with the above order.
   - Return df[column_order] when building the final DataFrame.

c. Add any missing fields:
   - If you want to include metrics like "% OTM/ITM", use logic from options_analysis.py (e.g., analyze_options_unicorn).
   - Ensure all columns output exact names for consistency with COLUMN_GROUPS in WatchlistTable.

---

2. FRONTEND UPDATES: WatchlistTable.js
---------------------------------------
File: WatchlistTable.js

a. Add Column Grouping:
   - At the top of WatchlistTable.js, define COLUMN_GROUPS and ESSENTIAL_COLUMNS:

     const COLUMN_GROUPS = {
       All: [
         "Ticker", "Option Type", "Strike", "Expiration",
         "Underlying Scenario % Change", "Current Underlying",
         "Simulated Underlying (+)", "Simulated Underlying (-)",
         "Current Premium", "Simulated Premium (+)",
         "Simulated Premium (+) % Change", "Simulated Premium (-)",
         "Simulated Premium (-) % Change", "Days to Gain",
         "Number of Contracts", "Average Cost per Contract",
         "Equity Invested", "Simulated Equity (+)", "Simulated Equity (-)",
         "Bid", "Ask", "Volume", "Open Interest",
         "Implied Volatility", "Delta", "Theta", "Gamma", "Vega", "Rho"
       ],
       Simulation: [
         "Underlying Scenario % Change",
         "Current Underlying",
         "Simulated Underlying (+)",
         "Simulated Underlying (-)",
         "Current Premium",
         "Simulated Premium (+)",
         "Simulated Premium (+) % Change",
         "Simulated Premium (-)",
         "Simulated Premium (-) % Change",
         "Days to Gain",
         "Simulated Equity (+)",
         "Simulated Equity (-)"
       ],
       "Position Details": [
         "Number of Contracts",
         "Average Cost per Contract",
         "Equity Invested"
       ],
       "Market Data": [
         "Bid", "Ask", "Volume", "Open Interest"
       ],
       Greeks: [
         "Implied Volatility", "Delta", "Theta", "Gamma", "Vega", "Rho"
       ]
     };

     const ESSENTIAL_COLUMNS = [
       "Ticker", "Option Type", "Strike", "Expiration", "Current Premium"
     ];

b. Replace Object.keys Rendering:
   - Remove: Object.keys(visibleItems[0])
   - Replace with visibleColumns (derived from COLUMN_GROUPS and selected group tabs).

c. Add Sorting:
   - Copy handleSort, getSortIcon, and sortConfig state from ScreenerResultsTable.js.
   - Use FaSort, FaSortUp, and FaSortDown icons for sort arrows.

d. Add Filters:
   - Import ScreenerFilterControls or create a minimal filter (Ticker and Expiration filters).
   - Add states for selectedTickers and selectedExpirations.
   - Filter visibleItems using these states.

e. Add CSV Export:
   - Import { CSVLink } from 'react-csv'.
   - Add Export Filtered CSV and Export Full CSV buttons at the top (similar to ScreenerResultsTable).

f. Styling:
   - Use ui.css classes for buttons:
     - btn-export-primary and btn-export-secondary for CSV buttons.
     - tab-button, tab-selected, tab-unselected for column group tabs.

---

3. FRONTEND UPDATES: ui.css
----------------------------
File: ui.css

a. Add/Ensure Table Styles:
   - Already has .table-container, .table, .table-header-cell, and .table-cell.
   - Confirm that WatchlistTable is using these class names on <table>, <thead>, <th>, and <td>.

b. Buttons:
   - Use btn-export-primary and btn-export-secondary for the CSV buttons.
   - Use btn-primary or btn-secondary for any new action buttons.

c. Tabs:
   - Use tab-button, tab-selected, and tab-unselected for the column group switching.

---

4. HOW TO IMPLEMENT
--------------------
Follow this order of implementation:
1. Update watchlistanalysis.py to produce correct columns.
2. Modify WatchlistTable.js:
   - Add COLUMN_GROUPS and ESSENTIAL_COLUMNS.
   - Implement visibleColumns logic (based on selected group).
   - Add sorting logic and icons.
   - Add CSV export buttons.
   - Apply filters if needed.
3. Verify the table renders correctly with new columns.
4. Test CSV export.
5. Test tab switching for column groups.

---

5. OPTIONAL: REUSE SCREENER COMPONENTS
---------------------------------------
If you want quick implementation:
- Copy ScreenerResultsTable.js to WatchlistTable.js and adjust:
  - Replace COLUMN_GROUPS with Watchlist-specific groups.
  - Change props (items instead of results).
  - Adjust CSV filenames.

---

6. TESTING
-----------
- Run watchlistanalysis.py to confirm DataFrame columns.
- Check WatchlistTable UI:
  - Verify tabs change visible columns.
  - Verify sorting (click column headers).
  - Verify CSV export.

---

7. NEXT STEPS
--------------
Once WatchlistTable matches ScreenerResultsTable, we can:
- Add column-specific formatting (e.g., currency or percentages).
- Add pagination if needed.
- Integrate the same filtering logic from ScreenerFilterControls.

---

END OF PLAN
