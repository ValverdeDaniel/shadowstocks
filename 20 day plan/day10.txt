
📘 Day 10: Integrating Stripe for Subscriptions and Gating Premium Features (Longform Learning Guide)

==================================================================
📌 Objective
==================================================================
Today, you will:
- Set up Stripe in Django and React
- Create a pricing page with subscription plans
- Connect frontend billing to Stripe Checkout
- Store user subscription status
- Gate access to premium features based on subscription

==================================================================
🧠 Why Add Stripe?
==================================================================
Stripe allows you to:
- Accept payments securely
- Offer premium plans with advanced features
- Scale your platform into a business

==================================================================
💳 Step 1: Create a Stripe Account
==================================================================

1. Go to https://dashboard.stripe.com/register
2. Create a test account
3. From the dashboard, get your test API keys:
   - **Publishable Key**
   - **Secret Key**

Enable “Test Mode” in Stripe dashboard.

==================================================================
📦 Step 2: Install Stripe Packages in Django
==================================================================

```bash
pip install stripe
```

In `settings.py`:

```python
STRIPE_SECRET_KEY = 'sk_test_...'
STRIPE_PUBLISHABLE_KEY = 'pk_test_...'
DOMAIN = 'http://localhost:3000'  # React front end
```

==================================================================
🧱 Step 3: Create Django View for Stripe Checkout Session
==================================================================

In `views.py`:

```python
import stripe
from django.conf import settings
from rest_framework.views import APIView
from rest_framework.response import Response

stripe.api_key = settings.STRIPE_SECRET_KEY

class CreateCheckoutSessionView(APIView):
    def post(self, request):
        session = stripe.checkout.Session.create(
            payment_method_types=['card'],
            line_items=[{
                'price_data': {
                    'currency': 'usd',
                    'unit_amount': 500,  # $5.00
                    'product_data': {
                        'name': 'Options Analysis Premium Plan',
                    },
                },
                'quantity': 1,
            }],
            mode='subscription',
            success_url=settings.DOMAIN + '/success',
            cancel_url=settings.DOMAIN + '/cancel',
        )
        return Response({'id': session.id})
```

In `urls.py`:

```python
from .views import CreateCheckoutSessionView

urlpatterns = [
    ...
    path('api/stripe/create-checkout-session/', CreateCheckoutSessionView.as_view(), name='create-checkout-session'),
]
```

==================================================================
🛠️ Step 4: Add React Button to Trigger Stripe Checkout
==================================================================

Install Stripe SDK:

```bash
npm install @stripe/stripe-js
```

Create `Pricing.js`:

```javascript
import React from 'react';
import { loadStripe } from '@stripe/stripe-js';

const stripePromise = loadStripe("pk_test_...");

function Pricing() {
  const handleSubscribe = async () => {
    const res = await fetch("http://localhost:8000/api/stripe/create-checkout-session/", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
    });
    const data = await res.json();
    const stripe = await stripePromise;
    stripe.redirectToCheckout({ sessionId: data.id });
  };

  return (
    <div>
      <h2>💸 Premium Plan – $5/month</h2>
      <p>Includes full Screener customization, Watchlist simulations, ROI charts, and more.</p>
      <button onClick={handleSubscribe}>Subscribe</button>
    </div>
  );
}

export default Pricing;
```

==================================================================
🗃️ Step 5: Track Subscription Status
==================================================================

In Django `models.py`:

```python
from django.contrib.auth.models import User

class Subscription(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    is_active = models.BooleanField(default=False)
    stripe_customer_id = models.CharField(max_length=100)
    stripe_subscription_id = models.CharField(max_length=100)
```

In views, use Stripe webhooks to listen for subscription events and update the DB accordingly (we’ll add this in Day 11).

==================================================================
🔐 Step 6: Gate Premium Features
==================================================================

In `views.py`, filter advanced content:

```python
def get_queryset(self):
    if not self.request.user.subscription.is_active:
        return SomeModel.objects.none()  # Or return basic data
    return super().get_queryset()
```

In React:

```jsx
if (!userIsPremium) {
  return <p>Upgrade to access this feature.</p>;
}
```

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ Integrated Stripe into Django backend  
✔ Created subscription checkout session  
✔ Built pricing UI in React  
✔ Hooked up React to Stripe Checkout  
✔ Prepared for user subscription tracking  
✔ Gated access to premium tools

Next up: Day 11 – building the webhook listener to track live subscription status from Stripe.
