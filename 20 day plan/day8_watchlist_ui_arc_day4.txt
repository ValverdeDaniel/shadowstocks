=== üóìÔ∏è Day 4: Watchlist Form UX Polish ‚Äî Dropdowns, Defaults, Validation ===

üéØ GOALS:
---------
1. Improve WatchlistParamsForm.js with:
   - Ticker: searchable dropdown with ticker + company name
   - Option Type: proper dropdown ("Call", "Put")
   - Field validation: strike > 0, days_to_gain > 0, etc.
   - Default values: number_of_contracts = 1, cost fallback = 0
2. Prevent submission with invalid or incomplete data
3. Final UI polish

==============================
üß† WHY THESE CHANGES?
==============================
- Avoid user error: typing ‚Äúcalls‚Äù or leaving out strike can break the backend
- Improve user speed and confidence with dropdowns
- Make the form robust before scaling to more users

==============================
üõ†Ô∏è PART 1: Install react-select (if not installed)
==============================

In your frontend terminal:

--------------------------------------------------
npm install react-select
--------------------------------------------------

==============================
üõ†Ô∏è PART 2: Replace Ticker Field with Dropdown
==============================

Inside WatchlistParamsForm.js:

1. At the top:
--------------------------------------------------
import Select from 'react-select';

const tickerOptions = [
  { label: 'AAPL ‚Äî Apple Inc.', value: 'AAPL' },
  { label: 'MSFT ‚Äî Microsoft', value: 'MSFT' },
  { label: 'GOOG ‚Äî Alphabet', value: 'GOOG' },
  { label: 'TSLA ‚Äî Tesla', value: 'TSLA' },
];
--------------------------------------------------

2. Replace the ticker input field:
--------------------------------------------------
{key === 'ticker' ? (
  <div>
    <label className="filter-heading">TICKER</label>
    <Select
      options={tickerOptions}
      value={tickerOptions.find(o => o.value === contract.ticker)}
      onChange={(selected) => {
        const updated = [...contracts];
        updated[index].ticker = selected?.value || '';
        setContracts(updated);
      }}
    />
  </div>
--------------------------------------------------

==============================
üõ†Ô∏è PART 3: Replace Option Type with Dropdown
==============================

Replace:
--------------------------------------------------
<input name="option_type" ... />
--------------------------------------------------

With:
--------------------------------------------------
<label className="filter-heading">OPTION TYPE</label>
<select
  className="input"
  name="option_type"
  value={contract.option_type}
  onChange={(e) => handleContractChange(index, e)}
>
  <option value="call">Call</option>
  <option value="put">Put</option>
</select>
--------------------------------------------------

==============================
üõ†Ô∏è PART 4: Add Basic Validation Before Submit
==============================

Update `handleRunSimulator()`:

--------------------------------------------------
const handleRunSimulator = async () => {
  for (const c of contracts) {
    if (!c.ticker || !c.option_type || !c.strike || !c.expiration || !c.days_to_gain) {
      alert('Please complete all required fields.');
      return;
    }
    if (parseFloat(c.strike) <= 0 || parseInt(c.days_to_gain) <= 0) {
      alert('Strike and Days to Gain must be positive.');
      return;
    }
  }

  try {
    const sanitizedContracts = contracts.map(c => ({
      ...c,
      strike: parseFloat(c.strike),
      days_to_gain: parseInt(c.days_to_gain),
      number_of_contracts: parseInt(c.number_of_contracts || 1),
      average_cost_per_contract: c.average_cost_per_contract
        ? parseFloat(c.average_cost_per_contract)
        : 0,
    }));

    const response = await fetch('/api/run-watchlist/', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ contracts: sanitizedContracts }),
    });

    if (!response.ok) throw new Error('Failed to run simulator');
    const data = await response.json();
    alert('Simulation run successfully!');
    if (onSimulationComplete) onSimulationComplete(data);
  } catch (error) {
    console.error('Error running simulator:', error);
    alert('Failed to run simulator.');
  }
};
--------------------------------------------------

==============================
üõ†Ô∏è PART 5: Polish Input Defaults
==============================

In `handleAddContract()`, use better defaults:

--------------------------------------------------
{
  ticker: '',
  option_type: 'call',
  strike: '',
  expiration: '',
  days_to_gain: 30,
  number_of_contracts: 1,
  average_cost_per_contract: '',
}
--------------------------------------------------

==============================
üî¨ TESTING INSTRUCTIONS
==============================

‚úÖ 1. Try submitting incomplete form (missing ticker or strike)  
‚Üí Should trigger alert and not submit

‚úÖ 2. Select a ticker via dropdown  
‚Üí Should properly bind ticker value

‚úÖ 3. Submit a valid contract  
‚Üí Should be accepted and POSTed correctly

‚úÖ 4. Try ‚ÄúPut‚Äù option via dropdown  
‚Üí Form should respect selected value

‚úÖ 5. Verify backend assigns cost if missing  
‚Üí average_cost_per_contract = 4.25 fallback still works

==============================
‚úÖ Day 4 Complete!
==============================

You now have:
- A fully tracked contract system
- User-friendly input UX
- Grouped contract display with real-time countdown
- Refreshable price logic + manual reset buttons

üéâ Excellent work! You‚Äôre now ready to extend the platform with reporting, alerts, multi-user support, or integrations.
