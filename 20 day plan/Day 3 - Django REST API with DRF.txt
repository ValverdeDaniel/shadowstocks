# Create a longform, highly detailed Day 3 Django REST API guide in .txt format
detailed_day_3_text = """
üìò Day 3: Creating Django REST API Endpoints (Longform Learning Guide)

==================================================================
üìå Objective
==================================================================
Today, you will:
- Learn how to use Django REST Framework (DRF) to expose your models as APIs
- Build serializers to convert Django models to JSON
- Write views and URL routes to access screener and watchlist data
- Understand the basics of REST principles and Django‚Äôs request/response cycle

==================================================================
üîç What is Django REST Framework?
==================================================================
Django REST Framework (DRF) is a powerful toolkit for building Web APIs in Django.
It allows your frontend (React, mobile apps, etc.) to talk to your Django backend using JSON.

==================================================================
üì¶ Step 1: Install Django REST Framework
==================================================================

Run:
pip install djangorestframework

Then, in backend/settings.py, add 'rest_framework' to INSTALLED_APPS:

INSTALLED_APPS = [
    ...
    'rest_framework',
    'contracts',  # your custom app
]

==================================================================
üìã Step 2: Create Serializers
==================================================================

Serializers convert Django model instances to JSON and vice versa.

Create a new file: contracts/serializers.py

Paste this:

from rest_framework import serializers
from .models import OptionContract, ScreenerInput, WatchlistEntry

class OptionContractSerializer(serializers.ModelSerializer):
    class Meta:
        model = OptionContract
        fields = '__all__'

class ScreenerInputSerializer(serializers.ModelSerializer):
    class Meta:
        model = ScreenerInput
        fields = '__all__'

class WatchlistEntrySerializer(serializers.ModelSerializer):
    class Meta:
        model = WatchlistEntry
        fields = '__all__'

==================================================================
üìÅ Step 3: Create Views (API Handlers)
==================================================================

In contracts/views.py, import the DRF tools and your serializers:

from rest_framework import generics
from .models import OptionContract, ScreenerInput, WatchlistEntry
from .serializers import OptionContractSerializer, ScreenerInputSerializer, WatchlistEntrySerializer

class OptionContractList(generics.ListCreateAPIView):
    queryset = OptionContract.objects.all()
    serializer_class = OptionContractSerializer

class ScreenerInputList(generics.ListCreateAPIView):
    queryset = ScreenerInput.objects.all()
    serializer_class = ScreenerInputSerializer

class WatchlistEntryList(generics.ListCreateAPIView):
    queryset = WatchlistEntry.objects.all()
    serializer_class = WatchlistEntrySerializer

üí° Tip:
- ListCreateAPIView lets users GET (view all) and POST (add) data.
- Later, you can use RetrieveUpdateDestroyAPIView for detailed views.

==================================================================
üåê Step 4: Set Up API URLs
==================================================================

Create a new file: contracts/urls.py

Paste:

from django.urls import path
from . import views

urlpatterns = [
    path('options/', views.OptionContractList.as_view(), name='options-list'),
    path('screener/', views.ScreenerInputList.as_view(), name='screener-list'),
    path('watchlist/', views.WatchlistEntryList.as_view(), name='watchlist-list'),
]

Then connect it to your main backend/urls.py:

from django.contrib import admin
from django.urls import path, include

urlpatterns = [
    path('admin/', admin.site.urls),
    path('api/', include('contracts.urls')),
]

==================================================================
üß™ Step 5: Test Your API
==================================================================

Run your server:
python manage.py runserver

Now visit these endpoints in your browser or Postman:
- http://127.0.0.1:8000/api/options/
- http://127.0.0.1:8000/api/screener/
- http://127.0.0.1:8000/api/watchlist/

You should see JSON responses like:
[
    {
        "id": 1,
        "ticker": "AAPL",
        "option_type": "call",
        "strike": 150.0,
        "expiration": "2025-12-19",
        "premium": 5.5
    },
    ...
]

==================================================================
‚úÖ Bonus: Add Simple Permissions
==================================================================

Add this to settings.py if you want all APIs to require login:

REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES': [
        'rest_framework.permissions.IsAuthenticated',
    ]
}

This requires login credentials to access the endpoints.

==================================================================
‚úÖ What You‚Äôve Accomplished
==================================================================

‚úî Installed Django REST Framework  
‚úî Created serializers for 3 models  
‚úî Built views that expose your data  
‚úî Registered clean URLs under /api/  
‚úî Tested JSON response from the browser or Postman  

Next up: You‚Äôll set up your React frontend to consume this API.

"""

# Save to .txt file
txt_path = "/mnt/data/Day_3_Django_REST_API_Detailed.txt"
with open(txt_path, "w") as f:
    f.write(detailed_day_3_text)

txt_path
