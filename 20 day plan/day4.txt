# Create a longform, highly detailed Day 4 React setup and connection guide in .txt format
detailed_day_4_text = """
📘 Day 4: React Setup and Connecting to Django API (Longform Learning Guide)

==================================================================
📌 Objective
==================================================================
Today, you will:
- Set up a React frontend app
- Organize your component structure
- Use Axios to connect to your Django backend
- Fetch and render data from your API endpoints
- Learn how to handle side effects in React using useEffect

==================================================================
🧠 Why React?
==================================================================
React is a fast, declarative JavaScript library used to build dynamic user interfaces. It allows you to build components that update automatically when your data changes. It’s perfect for an app like yours that displays tables, filters, and simulations.

==================================================================
📦 Step 1: Create Your React App
==================================================================

Navigate to the root of your project (outside of your backend Django folder):

npx create-react-app frontend

Once it's done, navigate into it:

cd frontend

Start the development server:

npm start

You should see the default React homepage at http://localhost:3000/

==================================================================
🗂️ Step 2: Clean Up Boilerplate
==================================================================

Inside the frontend folder, delete or simplify:

- Delete: App.test.js, logo.svg, setupTests.js, reportWebVitals.js
- In App.js: Remove everything inside the <header> and <main> tags and just return a placeholder like:

function App() {
  return (
    <div className="App">
      <h1>Options Analysis Platform</h1>
    </div>
  );
}

==================================================================
📂 Step 3: Set Up Folder Structure
==================================================================

Create a simple structure inside /src:

src/
├── components/
│   ├── ScreenerTable.js
│   └── WatchlistTable.js
├── services/
│   └── api.js
├── App.js
└── index.js

💡 Why?
Organizing your code keeps logic separate from presentation and makes it easier to scale.

==================================================================
🌐 Step 4: Install Axios for HTTP Requests
==================================================================

Axios is a promise-based HTTP client. Install it by running:

npm install axios

Then create the file: src/services/api.js

Paste this:

import axios from 'axios';

const API_BASE_URL = "http://localhost:8000/api";  // adjust if different

export const getOptions = () => axios.get(`${API_BASE_URL}/options/`);
export const getScreener = () => axios.get(`${API_BASE_URL}/screener/`);
export const getWatchlist = () => axios.get(`${API_BASE_URL}/watchlist/`);

==================================================================
📋 Step 5: Fetch Data in React with useEffect
==================================================================

Inside App.js or ScreenerTable.js:

import React, { useEffect, useState } from 'react';
import { getScreener } from './services/api';

function ScreenerTable() {
  const [screenerData, setScreenerData] = useState([]);

  useEffect(() => {
    getScreener()
      .then(response => {
        setScreenerData(response.data);
      })
      .catch(error => {
        console.error("Error fetching screener data:", error);
      });
  }, []);

  return (
    <div>
      <h2>Screener Results</h2>
      <table>
        <thead>
          <tr>
            <th>Ticker</th>
            <th>Strike %</th>
            <th>Allocation</th>
          </tr>
        </thead>
        <tbody>
          {screenerData.map((entry, index) => (
            <tr key={index}>
              <td>{entry.tickers.join(", ")}</td>
              <td>{entry.strike_pct}</td>
              <td>${entry.allocation}</td>
            </tr>
          ))}
        </tbody>
      </table>
    </div>
  );
}

export default ScreenerTable;

==================================================================
🔄 Step 6: CORS Setup (If Needed)
==================================================================

If your Django backend runs on localhost:8000 and your React frontend on localhost:3000,
you may run into a CORS (Cross-Origin Resource Sharing) error.

Install Django CORS headers:

pip install django-cors-headers

Add to settings.py:

INSTALLED_APPS = [
    ...
    'corsheaders',
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    ...
]

CORS_ALLOW_ALL_ORIGINS = True  # for development only

Restart Django: python manage.py runserver

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ Installed and bootstrapped a React frontend  
✔ Created reusable folder and component structure  
✔ Installed Axios and learned how to fetch data  
✔ Connected to your Django backend and displayed API results  
✔ Handled async logic using React hooks  
✔ Prepared your frontend to render real-time options data

Next up: You’ll build and style a full screener results table in React (Day 5).
"""

# Save to .txt file
txt_path = "/mnt/data/Day_4_React_Setup_and_API_Connection.txt"
with open(txt_path, "w") as f:
    f.write(detailed_day_4_text)

txt_path
