# Create a longform, highly detailed Day 2 Django modeling guide in .txt format
detailed_day_2_text = """
📘 Day 2: Creating Models for Screener & Watchlist (Longform Learning Guide)

==================================================================
📌 Objective
==================================================================
Today, you will:
- Learn how Django models work and how they map to database tables
- Define models for option contracts, screener filters, and watchlist entries
- Run migrations to apply your schema to PostgreSQL
- Learn about model relationships (ForeignKey) and data types
- Understand Django’s ORM fundamentals

==================================================================
🔍 What Are Models in Django?
==================================================================

Django models are Python classes that represent database tables.
Each model maps to a table, and each field in the model maps to a column.

Example:
class Book(models.Model):
    title = models.CharField(max_length=100)
    pages = models.IntegerField()

Creates a table:
book (id, title, pages)

==================================================================
🧠 Why Use Models?
==================================================================
- Models make your database structure readable and reusable in Python
- You can query them with Python instead of raw SQL
- Django can auto-generate admin panels and REST APIs from them

==================================================================
📋 Step 1: Open contracts/models.py
==================================================================

You’ll define three models:
1. OptionContract — represents a single option
2. ScreenerInput — stores saved user filters
3. WatchlistEntry — stores options users are tracking

Paste the following in contracts/models.py:

from django.db import models
from django.contrib.auth.models import User

class OptionContract(models.Model):
    ticker = models.CharField(max_length=10)
    option_type = models.CharField(max_length=4)  # 'call' or 'put'
    strike = models.FloatField()
    expiration = models.DateField()
    premium = models.FloatField()
    implied_volatility = models.FloatField(null=True, blank=True)

    def __str__(self):
        return f\"{self.ticker} {self.option_type.upper()} {self.strike} ({self.expiration})\"

class ScreenerInput(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    label = models.CharField(max_length=100)
    tickers = models.JSONField()
    strike_pct = models.FloatField()
    days_until_exp = models.IntegerField()
    days_to_gain = models.IntegerField()
    stock_gain_pct = models.FloatField()
    allocation = models.FloatField()

    def __str__(self):
        return f\"{self.label} by {self.user.username}\"

class WatchlistEntry(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    ticker = models.CharField(max_length=10)
    option_type = models.CharField(max_length=4)
    strike = models.FloatField()
    expiration = models.DateField()
    days_to_gain = models.IntegerField()
    number_of_contracts = models.IntegerField()
    average_cost_per_contract = models.FloatField()

    def __str__(self):
        return f\"{self.ticker} {self.option_type.upper()} {self.strike}\"

==================================================================
🧠 Model Field Types Explained
==================================================================

CharField – string input with length limit  
FloatField – decimal values (used for prices, percentages)  
DateField – calendar date  
ForeignKey – creates a relationship to another table (e.g., User)  
JSONField – stores a Python list or dictionary (e.g., list of tickers)

==================================================================
📁 Step 2: Register Models in admin.py (Optional)
==================================================================

Open contracts/admin.py and add:

from django.contrib import admin
from .models import OptionContract, ScreenerInput, WatchlistEntry

admin.site.register(OptionContract)
admin.site.register(ScreenerInput)
admin.site.register(WatchlistEntry)

💡 Why?
If you want to use Django's admin interface to view or edit models later, they must be registered.

==================================================================
⚙️ Step 3: Run Migrations
==================================================================

Django uses migrations to apply model changes to your database.

First, generate the migration file:
python manage.py makemigrations contracts

Then apply it to PostgreSQL:
python manage.py migrate

You’ll see:
- Creating model OptionContract
- Creating model ScreenerInput
- Creating model WatchlistEntry

==================================================================
✅ Step 4: Test Your Models in Shell (Optional)
==================================================================

Run the Django shell:
python manage.py shell

>>> from contracts.models import OptionContract
>>> OptionContract.objects.create(
...     ticker='AAPL',
...     option_type='call',
...     strike=150.0,
...     expiration='2025-12-19',
...     premium=5.5
... )

💡 Tip:
You can also use `OptionContract.objects.all()` to query records.

==================================================================
✅ What You’ve Accomplished
==================================================================

✔ You’ve defined models that match your screener and watchlist data  
✔ You’ve learned about model relationships and field types  
✔ You’ve run migrations and created your database schema  
✔ You’re ready to expose these models via a REST API in Day 3

Next up: Build your serializers and views to power your frontend.

"""

# Save to .txt file
txt_path = "/mnt/data/Day_2_Django_Models_Detailed.txt"
with open(txt_path, "w") as f:
    f.write(detailed_day_2_text)

txt_path
